#!/usr/bin/env node
var spawn = require('child_process').spawn;
var fs = require('fs');
var path = require('path');
var readline = require('readline');

function repositry(dir) {
  for (;; dir = path.dirname(dir)) {
    try {
      var stats = fs.statSync(path.join(dir, '.git'));
      if (stats && stats.isDirectory())
        return dir;
    } catch (e) {
      // TODO: check ENOENT
    }
    if (dir == '/')
      throw new Error('git repositry not found: ' + filename);
  }
}

function GitFile(pathRelativeToRepositry, hash) {
  this.path = pathRelativeToRepositry;
  this.hash = hash;
  this.lines = [];
  this._isFilled = false;
}

GitFile.prototype.blame = function (start, limit) {
  console.log('blame(' + start + ', ' + limit + ')');
  var me = this;
  if (this._isFilled) {
    return new Promise(function (onFullfilled, onRejected) {
      onFullfilled(me);
    });
  }
  var isRan = this.lines.length > 0;
  if (isRan) {
    var line = this.lines[limit - 1];
    if (line && !isFunction(line)) {
      return new Promise(function (onFullfilled, onRejected) {
        onFullfilled(me);
      });
    }
  }
  var promise = new Promise(function (onFullfilled, onRejected) {
    me.lines[limit - 1] = function () {
      onFullfilled(me);
    };
  });
  if (!isRan)
    this.runBlame();
  return promise;
}

GitFile.prototype.runBlame = function () {
  var args = ['blame', '-fCCC', this.hash ? this.hash : 'HEAD', '--', this.path];
  console.log('git ' + args.join(' '));
  var blame = spawn('git', args);
  var pattern = /^([0-9a-f]+) (\S+) +\((.+) +(\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2} \+\d{4}) +(\d+)\) (.*)/;
  var me = this;
  readline.createInterface({
    input: blame.stdout,
  }).on('line', function (line) {
    var match = pattern.exec(line);
    if (match) {
      var lineNumber = parseInt(match[5]);
      var index = lineNumber - 1;
      var onFullfilled = me.lines[index];
      me.lines[index] = {
        number: lineNumber,
        hash: match[1],
        path: match[2],
        author: match[3],
        dateTime: match[4],
        text: match[6],
      };
      if (onFullfilled)
        onFullfilled(me);
      return;
    }
    console.log('Unkonwn line ignored: ' + line);
  });
  blame.stderr.on('data', function (data) {
    console.log('stderr: ' + data.toString());
  })
  blame.on('close', function (code) {
    console.log('close: ' + code);
    me.onRunBlameCompleted();
  });
}

GitFile.prototype.onRunBlameCompleted = function () {
  for (var index = this.lines.length - 1;; index--) {
    var line = this.lines[index];
    if (line && !isFunction(line))
      break;
  }
  index++;
  var trimmed = this.lines.splice(index);
  for (var onFullfilled of trimmed) {
    if (onFullfilled)
      onFullfilled(this);
  }
  this._isFilled = true;
}

function GitBlameConsole(filename) {
  this.stack = [];
  this.ui = readline.createInterface(process.stdin, process.stdout);
  this.ui.setPrompt('Line number, Enter for next, Back>');
  this.resetPage();

  var fullPath = path.resolve(filename);
  var root = repositry(path.dirname(fullPath));
  process.chdir(root);
  this.setFile(new GitFile(path.relative(root, fullPath)));

  var me = this;
  this.ui.on('line', function (line) {
    me.onCommand(line);
  });
}

GitBlameConsole.prototype.resetPage = function () {
  this.lineCountInPage = 0;
}

GitBlameConsole.prototype.availableLineCountInPage = function () {
  return process.stdout.rows - this.lineCountInPage;
}

GitBlameConsole.prototype.writeLine = function (text) {
  text = text.substring(0, process.stdout.columns);
  this.ui.output.write(text + '\n');
  this.lineCountInPage++;
}

GitBlameConsole.prototype.prompt = function () {
  this.resetPage();
  this.ui.prompt();
}

GitBlameConsole.prototype.onCommand = function (line) {
  var num = parseInt(line);
  if (!isNaN(num)) {
    num--;
    if (num >= this.firstLineIndex && num <= this.nextLineIndex) {
      var line = this.file.lines[num];
      console.log(line);
      this.setFile(new GitFile(line.path, line.hash + '^'));
      return;
    }
    this.show(num);
    return;
  }
  switch (line) {
  case '':
    this.show();
    return;
  case 'b':
    this.back();
    return;
  case 'q':
    this.ui.close();
    return;
  default:
    console.log('Unknown command "' + line + '"');
    break;
  }
  this.prompt();
}

GitBlameConsole.prototype.setFile = function (file) {
  if (this.file)
    this.stack.push([this.file, this.firstLineIndex]);
  this.file = file;
  this.show(0);
}

GitBlameConsole.prototype.show = function (index) {
  var me = this;
  var file = this.file;
  if (index === undefined)
    index = this.nextLineIndex;
  this.firstLineIndex = index;
  var end = index + this.availableLineCountInPage() - 1;
  file.blame(index, end).then(function () {
    end = Math.min(file.lines.length, end);
    for (; index < end; index++) {
      var line = file.lines[index];
      if (!line) {
        this.writeLine('???');
        continue;
      }
      var text = line.number + ': ' + line.hash + ' ' + line.dateTime.substring(0, 10) + ' ' + line.author;
      text = text.padOrTrimRight(50);
      text += ' ' + line.text;
      me.writeLine(text);
    }
    me.nextLineIndex = index;
    me.prompt();
  });
}

GitBlameConsole.prototype.back = function () {
  if (this.firstLineIndex) {
    this.show(Math.max(0, this.firstLineIndex - process.stdout.rows + 1));
    return;
  }
  var popped = this.stack.pop();
  if (popped) {
    this.file = popped[0];
    this.show(popped[1]);
    return;
  }
  this.ui.output.write('No more to back\n');
  this.prompt();
}

function isFunction(obj) { return obj instanceof Function; }
String.prototype.padRight = function(l,c) {return this.length<l ? this+Array(l-this.length+1).join(c||" ") : this;};
String.prototype.padOrTrimRight = function(l,c) {return this.length<l ? this+Array(l-this.length+1).join(c||" ") : this.substring(0,l);};

new GitBlameConsole(process.argv[2]);
